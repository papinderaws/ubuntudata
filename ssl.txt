#Enable the module by typing:

$ sudo a2enmod ssl
#After you have enabled SSL, you'll have to restart the web server for #the change to be recognized:

$ sudo service apache2 restart

#With that, our web server is now able to handle SSL if we configure #it to do so.

#Let's start off by creating a subdirectory within Apache's #configuration hierarchy to place the certificate files that we will #be making:

$ sudo mkdir /etc/apache2/ssl

#Now that we have a location to place our key and certificate, we can #create them both in one step by typing:

$ sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/apache2/ssl/apache.key -out /etc/apache2/ssl/apache.crt

#The most important item that is requested is the line that reads #"Common Name (e.g. server FQDN or YOUR name)". You should enter the #domain name you want to associate with the certificate, or the #server's public IP address if you do not have a domain name.

#The questions portion looks something like this:

Country Name (2 letter code) [AU]:US
State or Province Name (full name) [Some-State]:New York
Locality Name (eg, city) []:New York City
Organization Name (eg, company) [Internet Widgits Pty Ltd]:Your Company
Organizational Unit Name (eg, section) []:Department of Kittens
Common Name (e.g. server FQDN or YOUR name) []:your_domain.com
Email Address []:your_email@domain.com

#The key and certificate will be created and placed in your 
#/etc/apache2/ssl directory.

$ sudo nano /etc/apache2/sites-available/default-ssl.conf

#With the comments removed, the file looks something like this:

<IfModule mod_ssl.c>
    <VirtualHost _default_:443>
        ServerAdmin webmaster@localhost
        DocumentRoot /var/www/html
        ErrorLog ${APACHE_LOG_DIR}/error.log
        CustomLog ${APACHE_LOG_DIR}/access.log combined
        SSLEngine on
        SSLCertificateFile /etc/ssl/certs/ssl-cert-snakeoil.pem
        SSLCertificateKeyFile /etc/ssl/private/ssl-cert-snakeoil.key
        <FilesMatch "\.(cgi|shtml|phtml|php)$">
                        SSLOptions +StdEnvVars
        </FilesMatch>
        <Directory /usr/lib/cgi-bin>
                        SSLOptions +StdEnvVars
        </Directory>
        BrowserMatch "MSIE [2-6]" \
                        nokeepalive ssl-unclean-shutdown \
                        downgrade-1.0 force-response-1.0
        BrowserMatch "MSIE [17-9]" ssl-unclean-shutdown
    </VirtualHost>
</IfModule>

#This may look a bit complicated, but luckily, we don't need to worry #about most of the options here.

#We want to set the normal things we'd configure for a virtual host ###
#(ServerAdmin, ServerName, ServerAlias, DocumentRoot, etc.) as well as
# change the location where Apache looks for the SSL certificate and #key.

#In the end, it will look something like this. The entries in red were #modified from the original file:

<IfModule mod_ssl.c>
    <VirtualHost _default_:443>
        ServerAdmin admin@example.com #CHANGE
        ServerName your_domain.com  #cHANGE
        ServerAlias www.your_domain.com # CHANGE
        DocumentRoot /var/www/html CHANGE
        ErrorLog ${APACHE_LOG_DIR}/error.log
        CustomLog ${APACHE_LOG_DIR}/access.log combined
        SSLEngine on
        SSLCertificateFile /etc/apache2/ssl/apache.crt #CHANGE
        SSLCertificateKeyFile /etc/apache2/ssl/apache.key  #CHANGE
        <FilesMatch "\.(cgi|shtml|phtml|php)$">
                        SSLOptions +StdEnvVars
        </FilesMatch>
        <Directory /usr/lib/cgi-bin>
                        SSLOptions +StdEnvVars
        </Directory>
        BrowserMatch "MSIE [2-6]" \
                        nokeepalive ssl-unclean-shutdown \
                        downgrade-1.0 force-response-1.0
        BrowserMatch "MSIE [17-9]" ssl-unclean-shutdown
    </VirtualHost>
</IfModule>

#Save and exit the file when you are finished.

#now that we have configured our SSL-enabled virtual host, we need to #enable it.

#We can do this by typing:

$ sudo a2ensite default-ssl.conf

#We then need to restart Apache to load our new virtual host file:

$ sudo service apache2 restart

#This should enable your new virtual host, which will serve encrypted #content using the SSL certificate you created.
https://server_domain_name_or_IP
